{
  "name": "classnames",
  "version": "2.1.3",
  "description": "A simple utility for conditionally joining classNames together",
  "main": "index.js",
  "author": {
    "name": "Jed Watson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/JedWatson/classnames.git"
  },
  "scripts": {
    "benchmarks": "node ./benchmarks/run",
    "unit": "mocha tests/*.js",
    "test": "npm run unit"
  },
  "keywords": [
    "react",
    "css",
    "classes",
    "classname",
    "classnames",
    "util",
    "utility"
  ],
  "devDependencies": {
    "benchmark": "^1.0.0",
    "mocha": "^2.1.0"
  },
  "readme": "Classnames\n===========\n\n[![Version](http://img.shields.io/npm/v/classnames.svg)](https://www.npmjs.org/package/classnames)\n[![Build Status](https://travis-ci.org/JedWatson/classnames.svg?branch=master)](https://travis-ci.org/JedWatson/classnames)\n\nA simple javascript utility for conditionally joining classNames together.\n\nInstall with npm or Bower.\n\n```sh\nnpm install classnames\n```\n\nUse with node.js, browserify or webpack:\n\n```js\nvar classNames = require('classnames');\nclassNames('foo', 'bar'); // => 'foo bar'\n```\n\nAlternatively, you can simply include `index.js` on your page with a standalone `<script>` tag and it will export a global `classNames` method, or define the module if you are using RequireJS.\n\n[Changelog](https://github.com/JedWatson/classnames/blob/master/HISTORY.md)\n\n## Usage\n\nThe `classNames` function takes any number of arguments which can be a string or object.\nThe argument `'foo'` is short for `{ foo: true }`. If the value of the key is falsy, it won't be included in the output.\n\n```js\nclassNames('foo', 'bar'); // => 'foo bar'\nclassNames('foo', { bar: true }); // => 'foo bar'\nclassNames({ foo: true }, { bar: true }); // => 'foo bar'\nclassNames({ foo: true, bar: true }); // => 'foo bar'\n\n// lots of arguments of various types\nclassNames('foo', { bar: true, duck: false }, 'baz', { quux: true }) // => 'foo bar baz quux'\n\n// other falsy values are just ignored\nclassNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''); // => 'bar 1'\n```\n\nArrays will be recursively flattened as per the rules above:\n\n```js\nvar arr = ['b', { c: true, d: false }];\nclassNames('a', arr); // => 'a b c'\n```\n\n### Alternate `dedupe` version\n\nThere is an alternate version of `classNames` available which correctly dedupes classes and ensures that falsy classes specified in later arguments are excluded from the result set.\n\nFor example:\n\n```js\nclassNames('foo', 'foo', 'bar'); // => 'foo bar'\nclassNames('foo', { foo: false, bar: true }); // => 'bar'\n```\n\nThis version is slower (about 10x) so it is offered as an opt-in.\n\nTo use the dedupe version with node, browserify or webpack:\n\n```js\nvar classNames = require('classnames/dedupe');\n```\n\nOr for standalone (global / AMD) use, include `dedupe.js` in a `<script>` tag on your page.\n\n\n## Polyfills needed to support older browsers\n\n#### `classNames >=2.0.0`\n\n`Array.isArray`: see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)\n for details about unsupported older browsers (e.g. <= IE8) and a simple polyfill.\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JedWatson/classnames/issues"
  },
  "homepage": "https://github.com/JedWatson/classnames",
  "_id": "classnames@2.1.3",
  "_from": "classnames@^2.1.2"
}
