{
  "name": "moment-duration-format",
  "version": "1.3.0",
  "description": "A moment.js plugin for formatting durations.",
  "main": "lib/moment-duration-format.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jsmreese/moment-duration-format.git"
  },
  "authors": [
    "John Madhavan-Reese <jsmreese@pureshare.com> (http://pureshare.com/)"
  ],
  "keywords": [
    "moment",
    "duration",
    "format"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jsmreese/moment-duration-format/issues"
  },
  "homepage": "https://github.com/jsmreese/moment-duration-format",
  "readme": "# Moment Duration Format\n\n**Format plugin for the Moment Duration object.**\n\nThis is a plugin to the Moment.js JavaScript date library to add comprehensive formatting to Moment Durations.\n\nFormat template grammar is patterned on the existing Moment Date format template grammar, with a few modifications because durations are fundamentally different from dates.\n\nThis plugin does not have any dependencies beyond Moment.js itself, and may be used in the browser and in Node.js.\n\n---\n\n## Installation\n\n**Node.js**\n\n`npm install moment-duration-format`\n\n**Bower**\n\n`bower install moment-duration-format`\n\n**Browser**\n\n`<script src=\"path/to/moment-duration-format.js\"></script>`\n\nWhen using this plugin in the browser, be sure to include moment.js on your page first.\n\n---\n\n## Usage\n\n### Module\n\nTo use this plugin as a module, use the `require` function:\n```\nrequire(\"moment-duration-format\");\n```\n\nThe plugin does not export anything, so there is no need to assign the require output to a variable.\n\nThe plugin depends on moment.js, which is not specified as a package dependency in the currently published version.\n\n### Basics\n\nThe duration format method can format any moment duration. If no template or other arguments are provided, the default template function will generate a template string based on the duration's value.\n\n```\nmoment.duration(123, \"minutes\").format();\n// \"2:03:00\"\n\nmoment.duration(123, \"months\").format();\n// \"10y 3m\"\n```\n\nThe duration format method may be called with three optional arguments:\n```\nmoment.duration.format([template] [, precision] [, settings])\n```\n\n### Template\n\n`template` (string|function) is the string used to create the formatted output, or a function that returns the string to be used as the format template.\n\n```\nmoment.duration(123, \"minutes\").format(\"h:mm\");\n// \"2:03\"\n```\n\nThe template string is parsed for moment-token characters, which are replaced with the duration's value for each unit type. The default tokens are:\n```\nyears:   Y or y\nmonths:  M\nweeks:   W or w\ndays:    D or d\nhours:   H or h\nminutes: m\nseconds: s\nms:      S\n```\n\nToken characters may be customized ([see below for an example](\\#tokens)).\n\nEscape token characters within the template string using square brackets.\n```\nmoment.duration(123, \"minutes\").format(\"h [hrs], m [min]\");\n// \"2 hrs, 3 min\"\n```\n\nEscape characters may also be customized ([see below for an example](\\#escape)).\n\n\n\n### Precision\n\n`precision` (number) defines the number of digits to display for the final value.\n\nThe default precison value is `0`.\n```\nmoment.duration(123, \"minutes\").format(\"h [hrs]\");\n// \"2 hrs\"\n```\n\nPositive precision defines the number of digits to display to the right of the decimal point.\n```\nmoment.duration(123, \"minutes\").format(\"h [hrs]\", 2);\n// \"2.04 hrs\"\n```\n\nNegative precision will truncate the value to the left of the decimal point.\n```\nmoment.duration(123, \"minutes\").format(\"m [min]\", -1);\n// \"120 min\"\n```\n\n### Settings\n\n`settings` is an object that can override any of the default moment duration format options.\n\nBoth the `template` and `precision` arguments may be specified as properties of a single `settings` object argument, or they may be passed separately along with an optional settings object.\n\n```\nmoment.duration(123, \"minutes\").format({ template: \"h [hrs]\", precision: 2 });\n// \"2.04 hrs\"\n```\n\n#### Trim\n\nLeading tokens are automatically trimmed when they have no value.\n```\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\");\n// \"2:03:00\"\n```\n\nTo stop that behavior, set `{ trim: false }`.\n```\nmoment.duration(123, \"minutes\").format(\"d[d] h:mm:ss\", { trim: false });\n// \"0d 2:03:00\"\n```\n\nUse `{ trim: \"right\" }` to trim from the right.\n```\nmoment.duration(123, \"minutes\").format(\"[seconds:] s -- [minutes:] m -- [hours:] h -- [days:] d\", { trim: \"right\" });\n// \"seconds: 0 -- minutes: 3 -- hours: 2\"\n```\n\n#### Force Length\n\nForce the first moment token with a value to render at full length, even when the template is trimmed and the first moment token has a length of 1. Sounds more complicated than it is.\n\n```\nmoment.duration(123, \"seconds\").format(\"h:mm:ss\");\n// \"2:03\"\n```\n\nIf you want minutes to always be rendered with two digits, you can set the first token to a length greater than 1 (this stops the automatic length trimming for the first token that has a value).\n\n```\nmoment.duration(123, \"seconds\").format(\"hh:mm:ss\");\n// \"02:03\"\n```\n\nOr you can use `{ forceLength: true }`.\n\n```\nmoment.duration(123, \"seconds\").format(\"h:mm:ss\", { forceLength: true });\n// \"02:03\"\n```\n\n\n### Tokens\n\nMoment tokens are defined as regular expressions, and may be customized. Token definitions may be passed in the settings object, but are more likely set on the defaults object.\n\n#### Escape\n\nDefault escape token regexp: `/\\[(.+?)\\]/`\n\nDefine something other than square brackets as escape characters.\n\n```\nmoment.duration.fn.format.defaults.escape = /\\((.+?)\\)/;\nmoment.duration(123, \"seconds\").format(\"m (minutes)\", 2);\n// \"2.04 minutes\"\n```\n\n#### Years\n\nDefault years token regexp: `/[Yy]+/`\n\nDefine years token for spanish language formatting.\n\n```\nmoment.duration.fn.format.defaults.years = /[Aa]+/;\nmoment.duration(123, \"weeks\").format(\"a [años]\", 2);\n// \"2.35 años\"\n```\n\n#### Months\n\nDefault months token regexp: `/M+/`\n\nDefine months token to use only lower-case `m`.\n\n```\nmoment.duration.fn.format.defaults.months = /m+/;\nmoment.duration(123, \"weeks\").format(\"m M\", 2);\n// \"28.36 M\"\n```\n\n#### Weeks\n\nDefault weeks token regexp: `/[Ww]+/`\n\nDefine weeks token to use only lower-case `w`.\n\n```\nmoment.duration.fn.format.defaults.weeks = /w+/;\nmoment.duration(123, \"days\").format(\"w W\", 2);\n// \"17.57 W\"\n```\n\n#### Days\n\nDefault days token regexp: `/[Dd]+/`\n\nDefine days token to use only lower-case `d`.\n\n```\nmoment.duration.fn.format.defaults.days = /d+/;\nmoment.duration(123, \"hours\").format(\"d D\", 2);\n// \"5.12 D\"\n```\n\n#### Hours\n\nDefault hours token regexp: `/[Hh]+/`\n\nDefine hours token to use only lower-case `h`.\n\n```\nmoment.duration.fn.format.defaults.hours = /h+/;\nmoment.duration(123, \"minutes\").format(\"h H\", 2);\n// \"2.04 H\"\n```\n\n#### Minutes\n\nDefault minutes token regexp: `/m+/`\n\nDefine minutes token to use only lower-case `n`.\n\n```\nmoment.duration.fn.format.defaults.minutes = /n+/;\nmoment.duration(123, \"seconds\").format(\"n:ss\");\n// \"2:03\"\n```\n\n#### Seconds\n\nDefault seconds token regexp: `/s+/`\n\n#### Milliseconds\n\nDefault milliseconds token regexp: `/S+/`\n\n#### General\n\nDefault general token regexp: `/.+?/`\n\nNot sure why you'd want to redefine the general token regexp, but you can. Just make sure it's lazy so the other token expressions can do their jobs.\n\n",
  "readmeFilename": "README.md",
  "_id": "moment-duration-format@1.3.0",
  "_from": "moment-duration-format@"
}
